#!/usr/bin/env bash

DEVICE_NAME="Wi-Fi"
SSH_CONFIG=$(ls ~/.ssh/config)

function _usage()
{
	cat << USAGE
	Usage:

		${0##/*/} <HOST>
			Login to MACHINE

		${0##/*/} <HOST1>+<HOST2>
			Login to HOST2 via HOST1

		${0##/*/} [info] [pattern]
		${0##/*/} [grep] [pattern]
		${0##/*/} [search] [pattern]
			search your ~/.ssh/config and accepts all options of grep

		${0##/*/} [list|-l]
			list all hosts

		${0##/*/} [start|status|stop] <HOST..>
			Check the SSH connection status of a HOST

		${0##/*/} proxy <HOST>
			HOST as proxy server

USAGE
	grep -A100 '^#* OPTIONS #*$' $0
}

function require () {
  for i
  do
    if ! command -v $i > /dev/null
    then
      echo Command $i not found >&2
      exit 1
    fi
  done
}

function _deprecated()
{
	echo deprecated command: $1 >&2
}

# Test an IP address for validity:
# Usage:
#      valid_ip IP_ADDRESS
#      if [[ $? -eq 0 ]]; then echo good; else echo bad; fi
#   OR
#      if valid_ip IP_ADDRESS; then echo good; else echo bad; fi
#
# http://www.linuxjournal.com/content/validating-ip-address-bash-script
function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function _construct_ssh_config() {
	cat << COMMENT
##
#
# DO NOT EDIT
#
# This file is generated by ${0##/*/} from $SSH_CONFIG.d/*config
#
##
COMMENT
	ls $SSH_CONFIG.d/*config | while read i
	do cat << COMMENT

##
#
# ${0##/*/} $i
#
##

COMMENT
	cat $i
done
}

function set_ssh_config()
{
	local _config=${1:-~/.ssh/config}
	SSH_CONFIG=$(test -f $_config || touch $_config; ls $_config)

	test -d "$SSH_CONFIG.d" || return
	# check last modified timestamps and skip config generations
	ls -t $SSH_CONFIG.d/* | head -1 |
		xargs ls -t $SSH_CONFIG | head -1 |
		xargs test "$SSH_CONFIG" = &&
		return

	_construct_ssh_config > $SSH_CONFIG
}
set_ssh_config $SSH_CONFIG

function show_ssh_config()
{
	local start=0
	# accepts all options of grep
	grep -C10 $@ $SSH_CONFIG |
		while read k v
		do
			local isComment="|"
			case $k in
				Host) start=1; echo ;;
				"#") isComment=: ;;
				--|"##") start=0; continue ;;
			esac
			test $start -eq 1 && echo -n "${v// /$isComment} "
		done |
		grep $@ |
		column -t |
		tr "|" " "
}

function kill_ssh()
{
	case "$1" in
		-f|force) local force=1; shift;;
	esac
	for i in ${1:-$(getActiveConnections | xargs -n1 basename | cut -d: -f1)}
	do
		if ssh -O check $i 2> /dev/null
		then
			# if proxy exists for this host, turn it off
			which networksetup >/dev/null &&
				test "$(ps aux | grep -c "$i"..[f]NCD)" -ge 1 &&
				sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME off

			ssh -O exit $i
		fi
	done
	if test -n "$force"
	then
		getActiveConnections | xargs rm
		kill_ssh_tunnel_proxy
	fi
}

function getActiveConnections()
{
	grep ControlPath $SSH_CONFIG |
		tail -1 |
		while read i j
		do
			echo $j |
				sed -e s,%.,*,g -e s,~,$HOME, |
				while read k
				do
					ls -t $k 2> /dev/null
				done
		done
}

function ssh_status()
{
	for i in ${1:-$(getActiveConnections | xargs -n1 basename | cut -d: -f1)}
	do
		ssh -O check $i 2>&1 | grep pid | sed -E "s,.*(pid=[0-9]*).*,\1 $i,"
	done
	which networksetup >/dev/null && networksetup -getsocksfirewallproxy $DEVICE_NAME | grep ^Enabled
}

function ssh_tunnel_proxy()
{
	case $1 in
		kill) kill_ssh_tunnel_proxy; exit 0;;
	esac
	ssh $1 -fNCD3128 &&
		( which networksetup >/dev/null && sudo networksetup -setsocksfirewallproxy $DEVICE_NAME localhost 3128 ) &&
		( which networksetup >/dev/null && sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME on )
}

function kill_ssh_tunnel_proxy()
{
	which networksetup >/dev/null &&
		networksetup -getsocksfirewallproxy $DEVICE_NAME | grep ^Enabled | grep Yes -q &&
		sudo networksetup -setsocksfirewallproxystate $DEVICE_NAME off
}

# http://wiki.gentoo.org/wiki/SSH_jump_host
function ProxyCommand()
{
	parseHostsAndConnect "${@:0:$#}"
	echo Successfully connected to "${@:0:$#}" >&2
}

function ssh_prime()
{
	for i
	do
		parseHostsAndConnect $i
		local ConnectTimeout=$(ssh -G "$stack" | grep connecttimeout | awk '{print 10 * $2}')
		_keep_trying -o ConnectTimeout=$ConnectTimeout "$stack"
	done
}

function _keep_trying()
{
	local _host="$@"
	local _counter=0
	local _err=0
	until ssh -q -O check $_host 2> /dev/null
	do
		_counter=$(($_counter+1))
		if test -z "$_gate"
		then
			ssh -fN $_host
		else
			local _dynamicport=$(_assignport $_gate)
			ssh -fN -D $_dynamicport $_gate &&
			ssh -fN -o ProxyCommand="nc -x 127.0.0.1:$_dynamicport %h %p" $_host
		fi
		_err=$?
		echo $_host $_counter >&2
		test $_err -ne 0 && sleep 1
		test $_counter -ge 99 && echo Please try again later: ssh $_host >&2 && exit 1
	done
}

function _assignport ()
{
	local _address=$(ssh -G $@ | grep -i ^hostname | xargs -n1 | sed 1d)
	local _last=($_address)

	if ! valid_ip $_address
	then
		if host $_address > /dev/null
		then
			_address=($(host $_address))
			_address=${_address[${#_address[@]}-1]}
		fi
	fi

	if valid_ip $_address
	then
		OIFS=$IFS
		IFS='.'
		_last=($_address)
		_last=${_last[${#_last[@]}-1]}
		IFS=$OIFS
		echo $((22000+$_last))
		echo Port $((22000+$_last)) assigned based on IP $_address >&2
	else
		local _startingport=22000
		while nc -z 127.0.0.1 $_startingport
		do
			_startingport=$(($_startingport+1))
		done
		echo $_startingport
		echo Port $_startingport assigned >&2
	fi
}

function list_ssh_host()
{
	local REGEXP=${1:-.*}
	grep "Host " $SSH_CONFIG |
		while read i j
		do echo "$j"
		done |
		grep "$REGEXP"
}

function parseHostsAndConnect()
{
	stack="$@"
	while echo "$stack" | grep -q +
	do
		local gateway=$(echo $stack | cut -d+ -f1 )
		        stack=$(echo $stack | cut -d+ -f2-)
		local    dest=$(echo $stack | cut -d+ -f1 )
		_gate="$gateway" _keep_trying "$dest"
	done
}

require nc ssh sed grep while tr cat xargs head tail ls touch column basename cut rm read test host
### OPTIONS ###
case $1 in
	'')              _usage ;;
	edit|-e)         vim $0 ;;
	info|grep|search)shift; show_ssh_config $@ ;;
	list|-l)         shift; list_ssh_host $@ ;;
	prime|-p|start)  shift; ssh_prime $@ ;;
	kill|-k|stop)    shift; kill_ssh $@ ;;
	status|st)       shift; ssh_status $@ ;;
	proxy)           shift; ssh_tunnel_proxy $1;;
	ProxyCommand)    shift; ProxyCommand "$@" ;;
	assignport)      _deprecated $1; shift; _assignport "$@" ;;   # deprecated
	local*)          _deprecated $1; screen -R -d -S $(whoami) ;; # deprecated
	screen)                                                       # deprecated
		_deprecated $1
		shift
		parseHostsAndConnect "$@"
		ssh $stack -t screen -R -d -S $(whoami)
	;;
	tmux)
		shift
		parseHostsAndConnect "$@"
		ssh $stack -t tmux attach-session -t $(whoami)
	;;
	*)
		parseHostsAndConnect "$@"
		ssh $stack
	;;
esac
